events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # 基础配置
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # 日志配置
    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log warn;
    
    # 性能优化
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;  # S3对象最大大小
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss;

    # 限制配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    
    # Upstream配置 - 通过consul-template动态生成
    # 配置文件将在 /etc/nginx/conf.d/upstreams.conf 中生成
    include /etc/nginx/conf.d/upstreams.conf;
    
    # S3 API Server配置
    server {
        listen 8080;
        server_name localhost;
        
        # 通用Headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, HEAD, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Amz-*' always;
        add_header 'Access-Control-Max-Age' '86400' always;
        
        # 处理OPTIONS请求(CORS预检)
        location / {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, HEAD, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Amz-*';
                add_header 'Content-Length' '0';
                add_header 'Content-Type' 'text/plain';
                return 204;
            }
        }
        
        # 网关健康检查
        location ^~ /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "OK\n";
        }
        
        # 系统状态检查
        location ^~ /status {
            access_log off;
            stub_status on;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # S3 API路由规则 - 使用Consul管理的upstream
        # =============================================
        
        # PUT /{bucket}/{key+} - 上传对象
        location ~ ^/([^/]+)/(.+) {
            limit_req zone=api burst=20 nodelay;
            
            # 设置通用headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-S3-Bucket $1;
            proxy_set_header X-S3-Key $2;
            
            # 传递请求体和headers
            proxy_pass_request_body on;
            proxy_set_header Content-Length $content_length;
            proxy_set_header Content-Type $content_type;
            
            # 代理到Storage Service upstream
            proxy_pass http://storage_service;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_buffering off;  # 流式传输
        }
        
        # GET /{bucket}/?list-type=2 - ListObjects v2
        location ~ ^/([^/]+)/?$ {
            limit_req zone=api burst=50 nodelay;
            
            # 设置headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-S3-Bucket $1;
            
            # 传递查询参数
            proxy_pass http://storage_service;
            proxy_read_timeout 60s;
        }
        
        # 管理API路由 - 使用Consul管理的upstream
        # =====================================
        
        # Metadata Service API
        location ^~ /api/v1/metadata {
            limit_req zone=api burst=50 nodelay;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://metadata_service;
            proxy_read_timeout 60s;
        }
        
        # Storage Service API
        location ^~ /api/v1/storage {
            limit_req zone=api burst=50 nodelay;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://storage_service;
            proxy_read_timeout 60s;
        }
        
        # Queue Service API
        location ^~ /api/v1/queue {
            limit_req zone=api burst=30 nodelay;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://queue_service;
            proxy_read_timeout 60s;
        }
        
        # Third-Party Service API
        location ^~ /api/v1/third-party {
            limit_req zone=api burst=20 nodelay;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://third_party_service;
            proxy_read_timeout 60s;
        }
        
        # Mock Error Service API
        location ^~ /api/v1/mock-error {
            limit_req zone=api burst=10 nodelay;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://mock_error_service;
            proxy_read_timeout 60s;
        }
        
        # 自定义错误处理
        error_page 404 = @not_found;
        error_page 502 503 504 = @service_unavailable;
        error_page 500 = @internal_error;
        
        # 404处理 - S3兼容的NoSuchKey响应
        location @not_found {
            add_header Content-Type application/xml;
            return 404 '<?xml version="1.0" encoding="UTF-8"?>
<Error>
    <Code>NoSuchKey</Code>
    <Message>The specified key does not exist.</Message>
    <RequestId>$request_id</RequestId>
</Error>';
        }
        
        # 服务不可用处理
        location @service_unavailable {
            add_header Content-Type application/xml;
            return 503 '<?xml version="1.0" encoding="UTF-8"?>
<Error>
    <Code>ServiceUnavailable</Code>
    <Message>Please reduce your request rate.</Message>
    <RequestId>$request_id</RequestId>
</Error>';
        }
        
        # 内部错误处理
        location @internal_error {
            add_header Content-Type application/xml;
            return 500 '<?xml version="1.0" encoding="UTF-8"?>
<Error>
    <Code>InternalError</Code>
    <Message>We encountered an internal error. Please try again.</Message>
    <RequestId>$request_id</RequestId>
</Error>';
        }
    }
}