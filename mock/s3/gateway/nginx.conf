# MockS3 Nginx Gateway Configuration
# S3 协议适配和路由网关

# 全局配置
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# 事件处理
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# HTTP配置
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format s3_access '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_authorization" "$http_x_amz_date" '
                         '"$http_user_agent" $request_time';

    access_log /var/log/nginx/access.log main;

    # 基础设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100m;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 上游服务定义
    upstream metadata_service {
        least_conn;
        server metadata-service:8081 max_fails=3 fail_timeout=30s;
        # 可以添加更多实例实现负载均衡
        # server metadata-service-2:8081 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream storage_service {
        least_conn;
        server storage-service:8082 max_fails=3 fail_timeout=30s;
        # server storage-service-2:8082 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream queue_service {
        least_conn;
        server queue-service:8083 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream third_party_service {
        least_conn;
        server third-party-service:8084 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream mock_error_service {
        least_conn;
        server mock-error-service:8085 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # 限流配置
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=s3_limit:10m rate=50r/s;
    
    # 连接限制
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # 缓存配置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=s3_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;

    # 主服务器配置
    server {
        listen 8080;
        listen [::]:8080;
        server_name localhost mocks3.local;

        # 访问日志
        access_log /var/log/nginx/s3_access.log s3_access;
        error_log /var/log/nginx/s3_error.log;

        # 基础安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # 限流和连接限制
        limit_req zone=s3_limit burst=20 nodelay;
        limit_conn conn_limit 10;

        # 健康检查端点
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"mocks3-gateway","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # 管理API路由
        location /api/v1/metadata/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://metadata_service/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        location /api/v1/queue/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://queue_service/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        location /api/v1/third-party/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://third_party_service/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/v1/error/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://mock_error_service/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # S3 API路由 - 对象操作
        location ~ ^/([^/]+)/(.+)$ {
            set $bucket $1;
            set $key $2;
            
            # 通用配置 (支持大文件上传)
            client_max_body_size 100m;
            client_body_timeout 300s;
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            proxy_request_buffering off;
            
            # 缓存配置
            proxy_cache s3_cache;
            proxy_cache_valid 200 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$request_method$request_uri";
            proxy_cache_bypass $http_cache_control;
            add_header X-Cache-Status $upstream_cache_status;
            
            # 通用代理头设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-S3-Bucket $bucket;
            proxy_set_header X-S3-Key $key;
            
            # 默认路由到storage服务
            proxy_pass http://storage_service/$bucket/$key;
            
            # 根据请求方法设置不同的日志
            if ($request_method = PUT) {
                access_log /var/log/nginx/s3_upload.log s3_access;
            }
            
            # 下载操作
            if ($request_method = GET) {
                access_log /var/log/nginx/s3_download.log s3_access;
            }
            
            # 删除操作
            if ($request_method = DELETE) {
                access_log /var/log/nginx/s3_delete.log s3_access;
            }
            
            # HEAD请求 - 获取对象元数据
            if ($request_method = HEAD) {
                access_log /var/log/nginx/s3_head.log s3_access;
            }
        }

        # S3 API路由 - Bucket操作
        # GET /{bucket} - 列出对象
        # GET /{bucket}?list-type=2 - 列出对象V2
        # 排除系统路径(health, api等)
        location ~ ^/(?!health|api)([^/]+)/?$ {
            set $bucket $1;
            
            # 通用代理头设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-S3-Bucket $bucket;
            
            # 路由到storage服务的bucket端点
            proxy_pass http://storage_service/$bucket$is_args$args;
            
            if ($request_method = GET) {
                access_log /var/log/nginx/s3_list.log s3_access;
            }
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            return 404 '{"error":"Not Found","message":"The requested resource was not found"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            internal;
            return 500 '{"error":"Internal Server Error","message":"An internal server error occurred"}';
            add_header Content-Type application/json;
        }

        # 禁止访问隐藏文件
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 默认拒绝未匹配的请求
        location / {
            return 404 '{"error":"Not Found","message":"Invalid S3 API endpoint"}';
            add_header Content-Type application/json;
        }
    }

    # 管理面板服务器（可选）
    server {
        listen 8081;
        server_name admin.mocks3.local;

        access_log /var/log/nginx/admin_access.log main;
        error_log /var/log/nginx/admin_error.log;

        # 基础认证（生产环境应使用更强的认证）
        # auth_basic "MockS3 Admin";
        # auth_basic_user_file /etc/nginx/.htpasswd;

        # 管理API代理
        location /metadata/ {
            proxy_pass http://metadata_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /storage/ {
            proxy_pass http://storage_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /queue/ {
            proxy_pass http://queue_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /third-party/ {
            proxy_pass http://third_party_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /error/ {
            proxy_pass http://mock_error_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 简单健康检查页面
        location /health/all {
            return 200 '{"status":"healthy","gateway":"nginx"}';
            add_header Content-Type application/json;
        }
    }
}